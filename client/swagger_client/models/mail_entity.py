# coding: utf-8

"""
    BPQ API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MailEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'mid': 'str',
        'bid': 'str',
        '_date': 'MonthAndDay',
        'time': 'TimeOnly',
        'date_time': 'datetime',
        'type': 'str',
        'state': 'str',
        '_from': 'str',
        'to': 'str',
        'subject': 'str',
        'mbo': 'str',
        'content_type': 'str',
        'content_transfer_encoding': 'str',
        'body': 'str'
    }

    attribute_map = {
        'id': 'id',
        'mid': 'mid',
        'bid': 'bid',
        '_date': 'date',
        'time': 'time',
        'date_time': 'dateTime',
        'type': 'type',
        'state': 'state',
        '_from': 'from',
        'to': 'to',
        'subject': 'subject',
        'mbo': 'mbo',
        'content_type': 'contentType',
        'content_transfer_encoding': 'contentTransferEncoding',
        'body': 'body'
    }

    def __init__(self, id=None, mid=None, bid=None, _date=None, time=None, date_time=None, type=None, state=None, _from=None, to=None, subject=None, mbo=None, content_type=None, content_transfer_encoding=None, body=None):  # noqa: E501
        """MailEntity - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._mid = None
        self._bid = None
        self.__date = None
        self._time = None
        self._date_time = None
        self._type = None
        self._state = None
        self.__from = None
        self._to = None
        self._subject = None
        self._mbo = None
        self._content_type = None
        self._content_transfer_encoding = None
        self._body = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if mid is not None:
            self.mid = mid
        if bid is not None:
            self.bid = bid
        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time
        if date_time is not None:
            self.date_time = date_time
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if subject is not None:
            self.subject = subject
        if mbo is not None:
            self.mbo = mbo
        if content_type is not None:
            self.content_type = content_type
        if content_transfer_encoding is not None:
            self.content_transfer_encoding = content_transfer_encoding
        if body is not None:
            self.body = body

    @property
    def id(self):
        """Gets the id of this MailEntity.  # noqa: E501


        :return: The id of this MailEntity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MailEntity.


        :param id: The id of this MailEntity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mid(self):
        """Gets the mid of this MailEntity.  # noqa: E501


        :return: The mid of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._mid

    @mid.setter
    def mid(self, mid):
        """Sets the mid of this MailEntity.


        :param mid: The mid of this MailEntity.  # noqa: E501
        :type: str
        """

        self._mid = mid

    @property
    def bid(self):
        """Gets the bid of this MailEntity.  # noqa: E501


        :return: The bid of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this MailEntity.


        :param bid: The bid of this MailEntity.  # noqa: E501
        :type: str
        """

        self._bid = bid

    @property
    def _date(self):
        """Gets the _date of this MailEntity.  # noqa: E501


        :return: The _date of this MailEntity.  # noqa: E501
        :rtype: MonthAndDay
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this MailEntity.


        :param _date: The _date of this MailEntity.  # noqa: E501
        :type: MonthAndDay
        """

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this MailEntity.  # noqa: E501


        :return: The time of this MailEntity.  # noqa: E501
        :rtype: TimeOnly
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MailEntity.


        :param time: The time of this MailEntity.  # noqa: E501
        :type: TimeOnly
        """

        self._time = time

    @property
    def date_time(self):
        """Gets the date_time of this MailEntity.  # noqa: E501


        :return: The date_time of this MailEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this MailEntity.


        :param date_time: The date_time of this MailEntity.  # noqa: E501
        :type: datetime
        """

        self._date_time = date_time

    @property
    def type(self):
        """Gets the type of this MailEntity.  # noqa: E501


        :return: The type of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MailEntity.


        :param type: The type of this MailEntity.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def state(self):
        """Gets the state of this MailEntity.  # noqa: E501


        :return: The state of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MailEntity.


        :param state: The state of this MailEntity.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def _from(self):
        """Gets the _from of this MailEntity.  # noqa: E501


        :return: The _from of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this MailEntity.


        :param _from: The _from of this MailEntity.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this MailEntity.  # noqa: E501


        :return: The to of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MailEntity.


        :param to: The to of this MailEntity.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def subject(self):
        """Gets the subject of this MailEntity.  # noqa: E501


        :return: The subject of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MailEntity.


        :param subject: The subject of this MailEntity.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def mbo(self):
        """Gets the mbo of this MailEntity.  # noqa: E501


        :return: The mbo of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._mbo

    @mbo.setter
    def mbo(self, mbo):
        """Sets the mbo of this MailEntity.


        :param mbo: The mbo of this MailEntity.  # noqa: E501
        :type: str
        """

        self._mbo = mbo

    @property
    def content_type(self):
        """Gets the content_type of this MailEntity.  # noqa: E501


        :return: The content_type of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this MailEntity.


        :param content_type: The content_type of this MailEntity.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def content_transfer_encoding(self):
        """Gets the content_transfer_encoding of this MailEntity.  # noqa: E501


        :return: The content_transfer_encoding of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._content_transfer_encoding

    @content_transfer_encoding.setter
    def content_transfer_encoding(self, content_transfer_encoding):
        """Sets the content_transfer_encoding of this MailEntity.


        :param content_transfer_encoding: The content_transfer_encoding of this MailEntity.  # noqa: E501
        :type: str
        """

        self._content_transfer_encoding = content_transfer_encoding

    @property
    def body(self):
        """Gets the body of this MailEntity.  # noqa: E501


        :return: The body of this MailEntity.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MailEntity.


        :param body: The body of this MailEntity.  # noqa: E501
        :type: str
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
