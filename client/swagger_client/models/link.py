# coding: utf-8

"""
    BPQ API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'far_call': 'str',
        'our_call': 'str',
        'port': 'str',
        'state': 'str',
        'link_type': 'str',
        'ax25_version': 'str'
    }

    attribute_map = {
        'far_call': 'farCall',
        'our_call': 'ourCall',
        'port': 'port',
        'state': 'state',
        'link_type': 'linkType',
        'ax25_version': 'ax25Version'
    }

    def __init__(self, far_call=None, our_call=None, port=None, state=None, link_type=None, ax25_version=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501
        self._far_call = None
        self._our_call = None
        self._port = None
        self._state = None
        self._link_type = None
        self._ax25_version = None
        self.discriminator = None
        if far_call is not None:
            self.far_call = far_call
        if our_call is not None:
            self.our_call = our_call
        if port is not None:
            self.port = port
        if state is not None:
            self.state = state
        if link_type is not None:
            self.link_type = link_type
        if ax25_version is not None:
            self.ax25_version = ax25_version

    @property
    def far_call(self):
        """Gets the far_call of this Link.  # noqa: E501


        :return: The far_call of this Link.  # noqa: E501
        :rtype: str
        """
        return self._far_call

    @far_call.setter
    def far_call(self, far_call):
        """Sets the far_call of this Link.


        :param far_call: The far_call of this Link.  # noqa: E501
        :type: str
        """

        self._far_call = far_call

    @property
    def our_call(self):
        """Gets the our_call of this Link.  # noqa: E501


        :return: The our_call of this Link.  # noqa: E501
        :rtype: str
        """
        return self._our_call

    @our_call.setter
    def our_call(self, our_call):
        """Sets the our_call of this Link.


        :param our_call: The our_call of this Link.  # noqa: E501
        :type: str
        """

        self._our_call = our_call

    @property
    def port(self):
        """Gets the port of this Link.  # noqa: E501


        :return: The port of this Link.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Link.


        :param port: The port of this Link.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def state(self):
        """Gets the state of this Link.  # noqa: E501


        :return: The state of this Link.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Link.


        :param state: The state of this Link.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def link_type(self):
        """Gets the link_type of this Link.  # noqa: E501


        :return: The link_type of this Link.  # noqa: E501
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this Link.


        :param link_type: The link_type of this Link.  # noqa: E501
        :type: str
        """

        self._link_type = link_type

    @property
    def ax25_version(self):
        """Gets the ax25_version of this Link.  # noqa: E501


        :return: The ax25_version of this Link.  # noqa: E501
        :rtype: str
        """
        return self._ax25_version

    @ax25_version.setter
    def ax25_version(self, ax25_version):
        """Sets the ax25_version of this Link.


        :param ax25_version: The ax25_version of this Link.  # noqa: E501
        :type: str
        """

        self._ax25_version = ax25_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
