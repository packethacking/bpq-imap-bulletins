# coding: utf-8

"""
    BPQ API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_call': 'str',
        'alias': 'str',
        'locator': 'str',
        'software': 'str',
        'version': 'str'
    }

    attribute_map = {
        'node_call': 'nodeCall',
        'alias': 'alias',
        'locator': 'locator',
        'software': 'software',
        'version': 'version'
    }

    def __init__(self, node_call=None, alias=None, locator=None, software=None, version=None):  # noqa: E501
        """GetInfoResponse - a model defined in Swagger"""  # noqa: E501
        self._node_call = None
        self._alias = None
        self._locator = None
        self._software = None
        self._version = None
        self.discriminator = None
        if node_call is not None:
            self.node_call = node_call
        if alias is not None:
            self.alias = alias
        if locator is not None:
            self.locator = locator
        if software is not None:
            self.software = software
        if version is not None:
            self.version = version

    @property
    def node_call(self):
        """Gets the node_call of this GetInfoResponse.  # noqa: E501


        :return: The node_call of this GetInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._node_call

    @node_call.setter
    def node_call(self, node_call):
        """Sets the node_call of this GetInfoResponse.


        :param node_call: The node_call of this GetInfoResponse.  # noqa: E501
        :type: str
        """

        self._node_call = node_call

    @property
    def alias(self):
        """Gets the alias of this GetInfoResponse.  # noqa: E501


        :return: The alias of this GetInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this GetInfoResponse.


        :param alias: The alias of this GetInfoResponse.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def locator(self):
        """Gets the locator of this GetInfoResponse.  # noqa: E501


        :return: The locator of this GetInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._locator

    @locator.setter
    def locator(self, locator):
        """Sets the locator of this GetInfoResponse.


        :param locator: The locator of this GetInfoResponse.  # noqa: E501
        :type: str
        """

        self._locator = locator

    @property
    def software(self):
        """Gets the software of this GetInfoResponse.  # noqa: E501


        :return: The software of this GetInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this GetInfoResponse.


        :param software: The software of this GetInfoResponse.  # noqa: E501
        :type: str
        """

        self._software = software

    @property
    def version(self):
        """Gets the version of this GetInfoResponse.  # noqa: E501


        :return: The version of this GetInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetInfoResponse.


        :param version: The version of this GetInfoResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
